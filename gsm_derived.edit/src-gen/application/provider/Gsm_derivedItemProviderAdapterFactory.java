/**
 */
package application.provider;

import application.util.Gsm_derivedAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Gsm_derivedItemProviderAdapterFactory extends Gsm_derivedAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Gsm_derivedItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.AssignType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignTypeItemProvider assignTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.AssignType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignTypeAdapter() {
		if (assignTypeItemProvider == null) {
			assignTypeItemProvider = new AssignTypeItemProvider(this);
		}

		return assignTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.CompositeApplicationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeApplicationTypeItemProvider compositeApplicationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.CompositeApplicationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeApplicationTypeAdapter() {
		if (compositeApplicationTypeItemProvider == null) {
			compositeApplicationTypeItemProvider = new CompositeApplicationTypeItemProvider(this);
		}

		return compositeApplicationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.ComponentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeItemProvider componentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.ComponentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeAdapter() {
		if (componentTypeItemProvider == null) {
			componentTypeItemProvider = new ComponentTypeItemProvider(this);
		}

		return componentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.EventModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventModelTypeItemProvider eventModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.EventModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventModelTypeAdapter() {
		if (eventModelTypeItemProvider == null) {
			eventModelTypeItemProvider = new EventModelTypeItemProvider(this);
		}

		return eventModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.EventType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventTypeItemProvider eventTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.EventType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventTypeAdapter() {
		if (eventTypeItemProvider == null) {
			eventTypeItemProvider = new EventTypeItemProvider(this);
		}

		return eventTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.ConditionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionTypeItemProvider conditionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.ConditionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionTypeAdapter() {
		if (conditionTypeItemProvider == null) {
			conditionTypeItemProvider = new ConditionTypeItemProvider(this);
		}

		return conditionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.DataAccessModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAccessModelTypeItemProvider dataAccessModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.DataAccessModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAccessModelTypeAdapter() {
		if (dataAccessModelTypeItemProvider == null) {
			dataAccessModelTypeItemProvider = new DataAccessModelTypeItemProvider(this);
		}

		return dataAccessModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.DataItemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemTypeItemProvider dataItemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.DataItemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataItemTypeAdapter() {
		if (dataItemTypeItemProvider == null) {
			dataItemTypeItemProvider = new DataItemTypeItemProvider(this);
		}

		return dataItemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link application.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.FlowModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowModelTypeItemProvider flowModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.FlowModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowModelTypeAdapter() {
		if (flowModelTypeItemProvider == null) {
			flowModelTypeItemProvider = new FlowModelTypeItemProvider(this);
		}

		return flowModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.FlowType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowTypeItemProvider flowTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.FlowType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowTypeAdapter() {
		if (flowTypeItemProvider == null) {
			flowTypeItemProvider = new FlowTypeItemProvider(this);
		}

		return flowTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.FlowWireType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowWireTypeItemProvider flowWireTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.FlowWireType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowWireTypeAdapter() {
		if (flowWireTypeItemProvider == null) {
			flowWireTypeItemProvider = new FlowWireTypeItemProvider(this);
		}

		return flowWireTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.GuardedStageModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardedStageModelTypeItemProvider guardedStageModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.GuardedStageModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardedStageModelTypeAdapter() {
		if (guardedStageModelTypeItemProvider == null) {
			guardedStageModelTypeItemProvider = new GuardedStageModelTypeItemProvider(this);
		}

		return guardedStageModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.InformationModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationModelTypeItemProvider informationModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.InformationModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationModelTypeAdapter() {
		if (informationModelTypeItemProvider == null) {
			informationModelTypeItemProvider = new InformationModelTypeItemProvider(this);
		}

		return informationModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.InputMappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputMappingTypeItemProvider inputMappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.InputMappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputMappingTypeAdapter() {
		if (inputMappingTypeItemProvider == null) {
			inputMappingTypeItemProvider = new InputMappingTypeItemProvider(this);
		}

		return inputMappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.InputType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputTypeItemProvider inputTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.InputType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputTypeAdapter() {
		if (inputTypeItemProvider == null) {
			inputTypeItemProvider = new InputTypeItemProvider(this);
		}

		return inputTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.InvokeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvokeTypeItemProvider invokeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.InvokeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvokeTypeAdapter() {
		if (invokeTypeItemProvider == null) {
			invokeTypeItemProvider = new InvokeTypeItemProvider(this);
		}

		return invokeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.LifecycleModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LifecycleModelTypeItemProvider lifecycleModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.LifecycleModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLifecycleModelTypeAdapter() {
		if (lifecycleModelTypeItemProvider == null) {
			lifecycleModelTypeItemProvider = new LifecycleModelTypeItemProvider(this);
		}

		return lifecycleModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.LifecycleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LifecycleTypeItemProvider lifecycleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.LifecycleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLifecycleTypeAdapter() {
		if (lifecycleTypeItemProvider == null) {
			lifecycleTypeItemProvider = new LifecycleTypeItemProvider(this);
		}

		return lifecycleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.MappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingTypeItemProvider mappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.MappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingTypeAdapter() {
		if (mappingTypeItemProvider == null) {
			mappingTypeItemProvider = new MappingTypeItemProvider(this);
		}

		return mappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.MilestoneType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MilestoneTypeItemProvider milestoneTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.MilestoneType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMilestoneTypeAdapter() {
		if (milestoneTypeItemProvider == null) {
			milestoneTypeItemProvider = new MilestoneTypeItemProvider(this);
		}

		return milestoneTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.OutputType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputTypeItemProvider outputTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.OutputType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputTypeAdapter() {
		if (outputTypeItemProvider == null) {
			outputTypeItemProvider = new OutputTypeItemProvider(this);
		}

		return outputTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.ServiceAdapterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceAdapterTypeItemProvider serviceAdapterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.ServiceAdapterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapterTypeAdapter() {
		if (serviceAdapterTypeItemProvider == null) {
			serviceAdapterTypeItemProvider = new ServiceAdapterTypeItemProvider(this);
		}

		return serviceAdapterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.SourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceTypeItemProvider sourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.SourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceTypeAdapter() {
		if (sourceTypeItemProvider == null) {
			sourceTypeItemProvider = new SourceTypeItemProvider(this);
		}

		return sourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.DataFlowGuardType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowGuardTypeItemProvider dataFlowGuardTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.DataFlowGuardType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowGuardTypeAdapter() {
		if (dataFlowGuardTypeItemProvider == null) {
			dataFlowGuardTypeItemProvider = new DataFlowGuardTypeItemProvider(this);
		}

		return dataFlowGuardTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.StageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageTypeItemProvider stageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.StageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageTypeAdapter() {
		if (stageTypeItemProvider == null) {
			stageTypeItemProvider = new StageTypeItemProvider(this);
		}

		return stageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.StateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateTypeItemProvider stateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.StateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateTypeAdapter() {
		if (stateTypeItemProvider == null) {
			stateTypeItemProvider = new StateTypeItemProvider(this);
		}

		return stateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.SubStageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubStageTypeItemProvider subStageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.SubStageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubStageTypeAdapter() {
		if (subStageTypeItemProvider == null) {
			subStageTypeItemProvider = new SubStageTypeItemProvider(this);
		}

		return subStageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.TargetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetTypeItemProvider targetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.TargetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetTypeAdapter() {
		if (targetTypeItemProvider == null) {
			targetTypeItemProvider = new TargetTypeItemProvider(this);
		}

		return targetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.TaskType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskTypeItemProvider taskTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.TaskType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskTypeAdapter() {
		if (taskTypeItemProvider == null) {
			taskTypeItemProvider = new TaskTypeItemProvider(this);
		}

		return taskTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.TransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionTypeItemProvider transitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.TransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionTypeAdapter() {
		if (transitionTypeItemProvider == null) {
			transitionTypeItemProvider = new TransitionTypeItemProvider(this);
		}

		return transitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.VariableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableTypeItemProvider variableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.VariableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableTypeAdapter() {
		if (variableTypeItemProvider == null) {
			variableTypeItemProvider = new VariableTypeItemProvider(this);
		}

		return variableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.ProcessFlowGuardType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessFlowGuardTypeItemProvider processFlowGuardTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.ProcessFlowGuardType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessFlowGuardTypeAdapter() {
		if (processFlowGuardTypeItemProvider == null) {
			processFlowGuardTypeItemProvider = new ProcessFlowGuardTypeItemProvider(this);
		}

		return processFlowGuardTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link application.FaultLoggerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FaultLoggerTypeItemProvider faultLoggerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link application.FaultLoggerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFaultLoggerTypeAdapter() {
		if (faultLoggerTypeItemProvider == null) {
			faultLoggerTypeItemProvider = new FaultLoggerTypeItemProvider(this);
		}

		return faultLoggerTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (assignTypeItemProvider != null)
			assignTypeItemProvider.dispose();
		if (compositeApplicationTypeItemProvider != null)
			compositeApplicationTypeItemProvider.dispose();
		if (componentTypeItemProvider != null)
			componentTypeItemProvider.dispose();
		if (eventModelTypeItemProvider != null)
			eventModelTypeItemProvider.dispose();
		if (eventTypeItemProvider != null)
			eventTypeItemProvider.dispose();
		if (conditionTypeItemProvider != null)
			conditionTypeItemProvider.dispose();
		if (dataAccessModelTypeItemProvider != null)
			dataAccessModelTypeItemProvider.dispose();
		if (dataItemTypeItemProvider != null)
			dataItemTypeItemProvider.dispose();
		if (documentRootItemProvider != null)
			documentRootItemProvider.dispose();
		if (flowModelTypeItemProvider != null)
			flowModelTypeItemProvider.dispose();
		if (flowTypeItemProvider != null)
			flowTypeItemProvider.dispose();
		if (flowWireTypeItemProvider != null)
			flowWireTypeItemProvider.dispose();
		if (guardedStageModelTypeItemProvider != null)
			guardedStageModelTypeItemProvider.dispose();
		if (informationModelTypeItemProvider != null)
			informationModelTypeItemProvider.dispose();
		if (inputMappingTypeItemProvider != null)
			inputMappingTypeItemProvider.dispose();
		if (inputTypeItemProvider != null)
			inputTypeItemProvider.dispose();
		if (invokeTypeItemProvider != null)
			invokeTypeItemProvider.dispose();
		if (lifecycleModelTypeItemProvider != null)
			lifecycleModelTypeItemProvider.dispose();
		if (lifecycleTypeItemProvider != null)
			lifecycleTypeItemProvider.dispose();
		if (mappingTypeItemProvider != null)
			mappingTypeItemProvider.dispose();
		if (milestoneTypeItemProvider != null)
			milestoneTypeItemProvider.dispose();
		if (outputTypeItemProvider != null)
			outputTypeItemProvider.dispose();
		if (serviceAdapterTypeItemProvider != null)
			serviceAdapterTypeItemProvider.dispose();
		if (sourceTypeItemProvider != null)
			sourceTypeItemProvider.dispose();
		if (dataFlowGuardTypeItemProvider != null)
			dataFlowGuardTypeItemProvider.dispose();
		if (stageTypeItemProvider != null)
			stageTypeItemProvider.dispose();
		if (stateTypeItemProvider != null)
			stateTypeItemProvider.dispose();
		if (subStageTypeItemProvider != null)
			subStageTypeItemProvider.dispose();
		if (targetTypeItemProvider != null)
			targetTypeItemProvider.dispose();
		if (taskTypeItemProvider != null)
			taskTypeItemProvider.dispose();
		if (transitionTypeItemProvider != null)
			transitionTypeItemProvider.dispose();
		if (variableTypeItemProvider != null)
			variableTypeItemProvider.dispose();
		if (processFlowGuardTypeItemProvider != null)
			processFlowGuardTypeItemProvider.dispose();
		if (faultLoggerTypeItemProvider != null)
			faultLoggerTypeItemProvider.dispose();
	}

}
